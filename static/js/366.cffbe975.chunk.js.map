{"version":3,"file":"static/js/366.cffbe975.chunk.js","mappings":"+SAEMA,EAAM,mCACNC,EAAW,gCAOJC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,sCACoBD,EADpB,oBADQ,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qDAOjBC,EAAc,mCAAG,WAAMC,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcD,EADd,kBAC2BO,EAD3B,oBADK,cACtBH,EADsB,yBAIrBA,EAASC,MAJY,2CAAH,sDAOdG,EAAY,mCAAG,WAAMC,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDQ,EADC,oBACaT,EADb,oBADG,cACpBI,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZK,EAAY,mCAAG,WAAMD,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDQ,EADC,4BACqBT,EADrB,oBADG,cACpBI,EADoB,yBAInBA,EAASC,KAAKM,MAJK,2CAAH,sDAOZC,EAAe,mCAAG,WAAMH,GAAN,uFACNN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACDQ,EADC,4BACqBT,EADrB,2BADM,cACvBI,EADuB,yBAItBA,EAASC,KAAKQ,SAJQ,2CAAH,qD,qICpCfC,EAAMC,EAAAA,EAAAA,IAAH,iDAIHC,EAAOD,EAAAA,EAAAA,GAAH,8GAQJE,EAAcF,EAAAA,EAAAA,IAAH,4L,GAUJA,EAAAA,EAAAA,GAAH,wC,QC8BjB,EAjDkB,WAChB,OAAkCG,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,IANAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAiBH,GACdI,MAAK,SAAApB,GAAI,OAAIe,EAAaf,EAAjB,IACTqB,MAAMC,QAAQC,IAClB,GAAE,CAACP,IAECF,EAIL,OACE,8BACGA,EAAUU,OAAS,GAClB,wBACGV,EACEW,MAAM,EAAG,IACTC,KAAI,gBAAGtB,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACH,UAAClB,EAAD,WACGkB,GACC,SAACpB,EAAD,CACEqB,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,MAAM,SAGR,SAACpB,EAAD,+BAEF,4BACE,wBACE,uBAAIe,OAEN,wCACa,uBAAIC,YAfVxB,EADR,OAuBT,uCAIP,C","sources":["API/Api.jsx","pages/CastMovie/CastMovie.styled.jsx","pages/CastMovie/CastMovie.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '406252fd7e7d93d0158a6e1609e77c75';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst URL_POSTER = 'https://image.tmdb.org/t/p/w500';\nconst URL_BACKDROP = 'https://image.tmdb.org/t/p/original/';\nconst LOGO_URL = `https://image.tmdb.org/t/p/w185`;\n\nexport { KEY, BASE_URL, URL_POSTER, URL_BACKDROP, LOGO_URL };\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMoviesQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};","import styled from '@emotion/styled';\n\nexport const Img = styled.img`\n    margin-right: 15px;\n`;\n\nexport const Item = styled.li`\n     display: flex;\n\n    &:not(:last-child) {\n        margin-bottom: 15px;\n    }\n`;\n\nexport const ImgNotFound = styled.div`\n display: flex;\n    align-items: center;\n    text-align: center;\n    width: 100px;\n    height: 150px;\n    margin-right: 15px;\n    background-color: #dddddd;\n`;\n\nexport const List = styled.ul`\n   padding: 0;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../API/Api';\nimport { Img, Item, ImgNotFound } from './CastMovie.styled';\n\nconst CastMovie = () => {\n  const [castMovie, setCastMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    API.getMovieCast(movieId)\n      .then(data => setCastMovie(data))\n      .catch(console.log);\n  }, [movieId]);\n\n  if (!castMovie) {\n    return;\n  }\n\n  return (\n    <>\n      {castMovie.length > 0 ? (\n        <ul>\n          {castMovie\n            .slice(0, 19)\n            .map(({ id, name, character, profile_path }) => (\n              <Item key={id}>\n                {profile_path ? (\n                  <Img\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                    width=\"100\"\n                  />\n                ) : (\n                  <ImgNotFound >Image not found</ImgNotFound>\n                )}\n                <div>\n                  <p>\n                    <b>{name}</b>\n                  </p>\n                  <p>\n                    Character: <b>{character}</b>\n                  </p>\n                </div>\n              </Item>\n            ))}\n        </ul>\n      ) : (\n        <div>No casts</div>\n      )}\n    </>\n  );\n};\n\nexport default CastMovie;"],"names":["KEY","BASE_URL","getTrandingMovies","axios","response","data","getMoviesQuery","query","getMovieById","id","getMovieCast","cast","getMovieReviews","results","Img","styled","Item","ImgNotFound","useState","castMovie","setCastMovie","movieId","useParams","useEffect","API","then","catch","console","log","length","slice","map","name","character","profile_path","src","alt","width"],"sourceRoot":""}